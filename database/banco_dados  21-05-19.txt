-- MySQL Script generated by MySQL Workbench
-- Mon May 27 18:58:17 2019
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema bd_fito
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema bd_fito
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `bd_fito` DEFAULT CHARACTER SET utf8 ;
USE `bd_fito` ;

-- -----------------------------------------------------
-- Table `bd_fito`.`colaboradores`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_fito`.`colaboradores` (
  `id` INT ZEROFILL NOT NULL AUTO_INCREMENT COMMENT 'Id único para identificar o colaborador.',
  `email` VARCHAR(45) NOT NULL COMMENT 'Email do colaborador, deverá ser criado pelo administrador do programa.',
  `senha` VARCHAR(45) NOT NULL COMMENT 'Senha do colaborador, a princípio é definida como o cpf do mesmo e depois pode ser alterada.',
  `cpf` VARCHAR(15) NOT NULL COMMENT 'Cpf do usuário, pode ser utilizado para a busca do mesmo.',
  `nome` VARCHAR(45) NOT NULL COMMENT 'Nome do colaborador.',
  `tipo` TINYINT(1) NOT NULL COMMENT 'Define o tipo de usuário:\n1 - Administrador\n2 - Líder\n3 - Colaborador comum',
  `sexo` TINYINT(1) NOT NULL COMMENT 'Determina o sexo do usuário:\n1 - Masculino\n2 - Feminino',
  `pontos` BIGINT(8) NULL COMMENT 'Números de pontos cumulativos do usuário, será usado para fazer o ranqueamento.',
  `creditos` BIGINT(8) NULL COMMENT 'Créditos do usuário, serão utilizados para a troca por itens na loja.',
  `status` TINYINT(1) NOT NULL COMMENT 'Status do colaborador:\n0 - Ativo\n1 - Desativado',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) ,
  UNIQUE INDEX `cpf_UNIQUE` (`cpf` ASC) )
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bd_fito`.`campanhas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_fito`.`campanhas` (
  `id` INT ZEROFILL NOT NULL AUTO_INCREMENT COMMENT 'Id único da campanha, utilizado para id identificá-la.',
  `nome` VARCHAR(45) NOT NULL COMMENT 'Nome da campanha, utilizado para pesquisa.',
  `descricao` TEXT(300) NOT NULL COMMENT 'Descrição da campanha, utilizada para o entendimento do usuário.',
  `tipo` TINYINT(1) NOT NULL COMMENT 'Utilizado para identificar o tipo da campanha:\n1 - Valor\n2 - Quantidade',
  `bonificacao` BIGINT(8) NOT NULL COMMENT 'Valor de pontos recebidos ao atingir determinada quantidade ou valor, por exemplo:\n1(bonificação) ponto a cada 10 reais.',
  `variante_pontos` BIGINT(8) NOT NULL COMMENT 'Variante que deve ser definida para gerar a bonificação do usuário no decorrer da campanha, por exemplo:\n1 ponto a cada 10 reais(variante de pontos).\n1 ponto a cada 1 item(variante de pontos).',
  `data_inicial` DATE NOT NULL COMMENT 'Data de início da campanha.',
  `data_final` DATE NOT NULL COMMENT 'Data de término da campanha.',
  `tipo_participantes` TINYINT(1) NOT NULL COMMENT 'Utilizado para identificar o tipo de participantes da campanha:\n0 - Individual\n1 - Grupo',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) )
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bd_fito`.`metas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_fito`.`metas` (
  `id` INT ZEROFILL NOT NULL AUTO_INCREMENT COMMENT 'Id da meta, utilizado para identificá-la.',
  `nome` VARCHAR(45) NOT NULL COMMENT 'Nome da meta utilizado para pesquisa e identificação.',
  `descricao` TEXT(300) NOT NULL COMMENT 'Descrição da meta, utilizado para os usuários entenderem o que devem fazer para cumpri-lá.',
  `pontos` BIGINT(8) NOT NULL COMMENT 'Pontos que o usuário recebe ao completar a campanha.',
  `campanhas_id` INT ZEROFILL NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) ,
  INDEX `fk_metas_campanhas1_idx` (`campanhas_id` ASC) ,
  CONSTRAINT `fk_metas_campanhas1`
    FOREIGN KEY (`campanhas_id`)
    REFERENCES `bd_fito`.`campanhas` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bd_fito`.`grupos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_fito`.`grupos` (
  `id` INT ZEROFILL NOT NULL AUTO_INCREMENT COMMENT 'Id do grupo, utilizado para identificá-lo.',
  `nome` VARCHAR(45) NOT NULL COMMENT 'Nome do grupo, utilizado para pesquisa e para os usuários identificá-lo. O nome deve ser único para não causar confusão.',
  `status` TINYINT(1) NOT NULL COMMENT 'Status do grupo:\n0 - Ativo\n1 - Desativado',
  `descricao` TEXT(300) NULL COMMENT 'Descrição do grupo.',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) ,
  UNIQUE INDEX `nome_UNIQUE` (`nome` ASC) )
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bd_fito`.`avatares`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_fito`.`avatares` (
  `id` INT ZEROFILL NOT NULL AUTO_INCREMENT COMMENT 'Id do avatar, utilizado para identificá-lo e fazer o link com o colaborador.',
  `imagem` VARCHAR(45) NOT NULL COMMENT 'Url da imagem do avatar.',
  `colaboradores_id` INT ZEROFILL NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) ,
  UNIQUE INDEX `imagem_UNIQUE` (`imagem` ASC) ,
  INDEX `fk_avatares_colaboradores1_idx` (`colaboradores_id` ASC) ,
  CONSTRAINT `fk_avatares_colaboradores1`
    FOREIGN KEY (`colaboradores_id`)
    REFERENCES `bd_fito`.`colaboradores` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bd_fito`.`itens`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_fito`.`itens` (
  `id` INT ZEROFILL NOT NULL AUTO_INCREMENT COMMENT 'Id do item, utilizado para identificá-lo e fazer o link com o avatar.',
  `nome` VARCHAR(45) NOT NULL COMMENT 'Nome do item, utilizado para pesquisa e identificação do mesmo pelo usuário.',
  `valor` BIGINT(8) NOT NULL COMMENT 'Valor do item que o usuário deverá pagar para liberá-lo. Este valor é definido pelo administrador.',
  `tipo` TINYINT(1) NOT NULL COMMENT 'Tipo do item:\n1 - Item virtual\n2 - Item real',
  `status` TINYINT(1) NOT NULL COMMENT 'Status do item:\n0 - Item bloqueado\n1 - Item desbloqueado (comprado)',
  `caminho` VARCHAR(255) NOT NULL,
  `quantidade` BIGINT(8) NULL COMMENT 'Quantidade do item REAL disponível para compra. NÃO deve ser cadastrado para itens virtuais.',
  `slot` TINYINT(1) NULL COMMENT 'Apenas para items que NÃO reais, para identificar onde devem ser equipados no avatar. Não pode ser nulo para itens de avatar.\n\n0 - Fundo\n1 - Corpo\n2 - Pés\n3 - Pernas\n4 - Torso\n5 - Cabelo\n6 - Acessórios de cabeça\n7 - Acessórios gerais',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) )
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bd_fito`.`avatares_has_itens`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_fito`.`avatares_has_itens` (
  `avatares_id` INT ZEROFILL NOT NULL COMMENT 'Estrangeira de avatares.',
  `itens_id` INT ZEROFILL NOT NULL COMMENT 'Estrangeira de itens.',
  `status` TINYINT(1) NOT NULL COMMENT 'Status do item, se ele está equipado ou não.',
  PRIMARY KEY (`avatares_id`, `itens_id`),
  INDEX `fk_avatares_has_itens_itens1_idx` (`itens_id` ASC) ,
  INDEX `fk_avatares_has_itens_avatares1_idx` (`avatares_id` ASC) ,
  CONSTRAINT `fk_avatares_has_itens_avatares1`
    FOREIGN KEY (`avatares_id`)
    REFERENCES `bd_fito`.`avatares` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_avatares_has_itens_itens1`
    FOREIGN KEY (`itens_id`)
    REFERENCES `bd_fito`.`itens` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bd_fito`.`colaboradores_has_campanhas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_fito`.`colaboradores_has_campanhas` (
  `colaboradores_id` INT ZEROFILL UNSIGNED NULL COMMENT 'Estrangeira de colaboradores.',
  `campanhas_id` INT ZEROFILL UNSIGNED NOT NULL COMMENT 'Estrangeira de campanhas.',
  `pontos_desta_campanha` BIGINT(8) NULL COMMENT 'Pontos obtidos apenas nesta campanha, poderão ser utilizados para gerar um ranqueamento apenas desta campanha.',
  `grupos_id` INT ZEROFILL NULL,
  INDEX `fk_colaboradores_has_campanhas_campanhas1_idx` (`campanhas_id` ASC) ,
  INDEX `fk_colaboradores_has_campanhas_colaboradores1_idx` (`colaboradores_id` ASC) ,
  INDEX `fk_colaboradores_has_campanhas_grupos1_idx` (`grupos_id` ASC) ,
  CONSTRAINT `fk_colaboradores_has_campanhas_colaboradores1`
    FOREIGN KEY (`colaboradores_id`)
    REFERENCES `bd_fito`.`colaboradores` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_colaboradores_has_campanhas_campanhas1`
    FOREIGN KEY (`campanhas_id`)
    REFERENCES `bd_fito`.`campanhas` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_colaboradores_has_campanhas_grupos1`
    FOREIGN KEY (`grupos_id`)
    REFERENCES `bd_fito`.`grupos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bd_fito`.`colaboradores_has_grupos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_fito`.`colaboradores_has_grupos` (
  `colaboradores_id` INT ZEROFILL NOT NULL,
  `grupos_id` INT ZEROFILL NOT NULL,
  PRIMARY KEY (`colaboradores_id`, `grupos_id`),
  INDEX `fk_colaboradores_has_grupos_grupos1_idx` (`grupos_id` ASC) ,
  INDEX `fk_colaboradores_has_grupos_colaboradores1_idx` (`colaboradores_id` ASC) ,
  CONSTRAINT `fk_colaboradores_has_grupos_colaboradores1`
    FOREIGN KEY (`colaboradores_id`)
    REFERENCES `bd_fito`.`colaboradores` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_colaboradores_has_grupos_grupos1`
    FOREIGN KEY (`grupos_id`)
    REFERENCES `bd_fito`.`grupos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
